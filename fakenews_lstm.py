# -*- coding: utf-8 -*-
"""FakeNews-LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cSrotGbLpQZlUChLULIfUQR0mAj_dVvp

# Fake News Classifier
"""

import pandas as pd

df = pd.read_csv('news.csv')

df.head()

df.isnull().sum()

import numpy as np
X = df.drop('label', axis=1)
y = np.array([1 if label == 'REAL' else 0 for label in df['label']])
y

X.shape

y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

import tensorflow as tf
print(tf.__version__)

from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

#Vocabulary_size
voc_size = 5000

"""# One Hot Representation"""

message = X_train.copy()
message.reset_index(inplace=True)

message_test = X_test.copy()
message_test.reset_index(inplace=True)

message.head()

message_test.head()

message['title'][1]

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

#Data Preprocessing of train data
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []
for i in range(0, len(message)):
  review = re.sub('[^a-zA-Z]', ' ', message['title'][i])
  review = review.lower()
  review = review.split()

  review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
  review = ' '.join(review)
  corpus.append(review)

#Data Preprocessing of test data
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus_test = []
for i in range(0, len(message_test)):
  review = re.sub('[^a-zA-Z]', ' ', message_test['title'][i])
  review = review.lower()
  review = review.split()

  review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
  review = ' '.join(review)
  corpus_test.append(review)

onehot_repr = [one_hot(words, voc_size) for words in corpus]
onehot_repr_test = [one_hot(words, voc_size) for words in corpus_test]

"""# Word Embedding"""

sent_length = 20
embedded_docs = pad_sequences(onehot_repr, padding='pre', maxlen=sent_length)
embedded_docs_test = pad_sequences(onehot_repr_test, padding='pre', maxlen=sent_length)

"""# LSTM Model Building"""

features = 40
model = Sequential()
model.add(Embedding(voc_size, features, input_length = sent_length))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())

import numpy as np
X_train = np.array(embedded_docs)
y_train = np.array(y_train)

X_test = np.array(embedded_docs_test)
y_test = np.array(y_test)

X_test.shape, y_test.shape

X_test

"""# Model Training"""

model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 10, batch_size = 64)

"""# Adding Dropout"""

from tensorflow.keras.layers import Dropout
## Creating model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(Dropout(0.3))
model.add(LSTM(100))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 10, batch_size = 64)

"""# Perfrmance Matrix & Accuracy"""

y_pred = model.predict(X_test)

y_pred = np.where(y_pred > 0.5, 1, 0)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

